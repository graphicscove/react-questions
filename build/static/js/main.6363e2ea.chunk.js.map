{"version":3,"sources":["Questions1.js","Questions2.js","Name.js","Questions3.js","Questionnaire.js","App.js","serviceWorker.js","index.js"],"names":["Questions1","props","this","currentStep","react_default","a","createElement","className","id","type","onChange","onUpdateSelected","defaultChecked","Object","values","selected","indexOf","htmlFor","React","Component","Questions2","Name","data-element","name","Questions3","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateName","e","setState","target","value","onNameChange","state","Fragment","src_Name","onClick","onDataSend","Questionnaire","updateSelected","toConsumableArray","includes","index","slice","concat","addName","onSendData","data","answers","console","log","fetch","method","body","headers","Content-Type","then","response","next","prev","resetQuestionnaire","src_Questions1","src_Questions2","src_Questions3","App","Questionnaire_Questionnaire","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6363e2ea.chunk.js","sourcesContent":["import React from 'react'\n\nclass Questions1 extends React.Component {\n    render() {\n        const props = this.props\n\n        if (props.currentStep !== 1) {\n            return null;\n        }\n\n        return (\n            <div className=\"questionnaire__fields\">\n                <p>Tick the things you like:</p>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-11\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-11') > -1} />\n                    <label htmlFor=\"input-11\">Relaxing on the beach</label>\n                </div>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-12\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-12') > -1} />\n                    <label htmlFor=\"input-12\">Exploring</label>\n                </div>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-13\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-13') > -1} />\n                    <label htmlFor=\"input-13\">Discovering Wildlife</label>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Questions1\n","import React from 'react'\n\nclass Questions2 extends React.Component {\n    render() {\n        const props = this.props\n\n        if (props.currentStep !== 2) {\n            return null;\n        }\n\n        return (\n            <div className=\"questionnaire__fields\">\n                <p>Tick the things that interest you:</p>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-21\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-21') > -1} />\n                    <label htmlFor=\"input-21\">Interacting with the local community</label>\n                </div>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-22\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-22') > -1} />\n                    <label htmlFor=\"input-22\">Extreeme experiences</label>\n                </div>\n                <div className=\"questionnaire__field\">\n                    <input id=\"input-23\" type=\"checkbox\" onChange={ props.onUpdateSelected } defaultChecked={Object.values(this.props.selected).indexOf('input-23') > -1} />\n                    <label htmlFor=\"input-23\">Tasting the local cuisine</label>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Questions2\n","import React from 'react'\n\nclass Name extends React.Component {\n    render(props) {\n        return (\n            <span data-element=\"name\">{this.props.name}</span>\n        )\n    }\n}\n\nexport default Name\n","import React from 'react'\nimport Name from './Name'\n\nclass Questions3 extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            name: ''\n        }\n    }\n\n    updateName = (e) => {\n        const props = this.props\n        this.setState({\n            name: e.target.value\n        })\n\n        props.onNameChange(e.target.value)\n    }\n\n    render() {\n        const props = this.props\n\n        if (props.currentStep !== 3) {\n            return null;\n        }\n\n        return (\n            <>\n                <p>What is your name?</p>\n                <input type=\"text\" onChange={ this.updateName } value={ props.name } className=\"questionnaire__name\" />\n                <div className=\"questionnaire__thanks\">\n                    {this.state.name &&\n                        <>Thanks for taking part <Name name={ this.state.name } />!</>\n                    }\n                </div>\n                <button type=\"submit\" className=\"button questionnaire__submit\" onClick={ props.onDataSend }>Submit Answers</button>\n            </>\n        )\n    }\n}\n\nexport default Questions3\n","import React from 'react'\nimport Questions1 from './Questions1'\nimport Questions2 from './Questions2'\nimport Questions3 from './Questions3'\n\nexport default class Questionnaire extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            currentStep: 1,\n            selected: [],\n            name: ''\n        }\n    }\n\n    updateSelected = (e) => {\n        if (![...this.state.selected].includes(e.target.id)) {\n            this.setState({\n                selected: [...this.state.selected, e.target.id]\n            })\n        } else {\n            const index = [...this.state.selected].indexOf(e.target.id)\n            this.setState({\n                selected: [...this.state.selected.slice(index)]\n            })\n        }\n    }\n\n    addName = (name) => {\n        this.setState({\n            name: name\n        })\n    }\n\n    onSendData = () => {\n        const data = {\n            'name': this.state.name,\n            'answers': this.state.selected\n        }\n\n        console.log(data);\n\n        fetch('/api', {\n            method: 'POST',\n            body:  data,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => console.log(response))\n    }\n\n    next = () => {\n        let currentStep = this.state.currentStep + 1;\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n\n    prev = () => {\n        let currentStep = this.state.currentStep - 1;\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n\n    resetQuestionnaire = () => {\n        this.setState({\n            currentStep: 1,\n            selected: [],\n            name: ''\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"questionnaire\">\n                <Questions1 onUpdateSelected={ this.updateSelected } currentStep={this.state.currentStep} selected={this.state.selected} />\n                <Questions2 onUpdateSelected={ this.updateSelected } currentStep={this.state.currentStep} selected={this.state.selected} />\n                <Questions3 onUpdateSelected={ this.updateSelected } currentStep={this.state.currentStep} onDataSend={ this.onSendData } onNameChange={ this.addName} />\n                <div className=\"questionnaire__navigation\">\n                    {this.state.currentStep !== 1 &&\n                        <button className=\"button\" onClick={this.prev}>Previous Question</button>\n                    }\n                    {this.state.currentStep !== 3 &&\n                        <button className=\"button\" onClick={this.next}>Next Question</button>\n                    }\n                </div>\n                <button className=\"text-link\" onClick={ this.resetQuestionnaire }>Reset answers</button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Questionnaire from './Questionnaire'\nimport './app.sass';\n\nconst App = () => (\n    <div className=\"app\">\n        <header className=\"app__header\">\n            <h1>Questionnaire</h1>\n        </header>\n        <Questionnaire />\n        <footer className=\"app__footer\">\n\n        </footer>\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}